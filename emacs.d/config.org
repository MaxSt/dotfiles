#+TITLE: My GNU Emacs configuration
#+OPTIONS: toc:4 h:4
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
#+PROPERTY: header-args:emacs-lisp :results silent :tangle yes
* Package Config
** Emacs Initialization
*** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC
*** Package Management

**** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

**** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

**** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))


      (when (< emacs-major-version 27)
      (package-initialize))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

* Defaults
** global
#+BEGIN_SRC emacs-lisp
  (setq
   inhibit-startup-screen t
   x-select-enable-clipboard t
   column-number-mode t

   ;; faster scrolling (see https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746)
   auto-window-vscroll nil

   tab-stop-list (number-sequence 2 120 2))
  ;; relative line numbers
  (setq-default display-line-numbers 'relative)
  ;; make current line 0
  (setq-default display-line-numbers-current-absolute 'nil)
  (setq-default fill-column 80)
  (setq-default truncate-lines nil) ; line wrap
  (setq-default indent-tabs-mode nil
                tab-width 2)
  (defvaralias 'c-basic-offset 'tab-width)
  ;; the blinking cursor is nothing, but an annoyance
  (blink-cursor-mode -1)
  (setq-default
   indicate-buffer-boundaries nil  ; don't show where buffer starts/ends
   indicate-empty-lines nil        ; don't show empty lines
   fringes-outside-margins t       ; switches order of fringe and margin
   ;; Keep cursors and highlights in current window only
   cursor-in-non-selected-windows nil
   highlight-nonselected-windows nil
   ;; Disable bidirectional text support for slight performance bonus
   bidi-display-reordering nil
   ;; Remove continuation arrow on right fringe
   ;; fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
   ;;                              fringe-indicator-alist)
   blink-matching-paren nil ; don't blink--too distracting
   ;;show-trailing-whitespace t ;; show trailing whitespace
   )
  ;; disable the annoying bell ring
  (setq ring-bell-function 'ignore)
  ;; reduce the frequency of garbage collection by making it happen on
  ;; each 50MB of allocated data (the default is on every 0.76MB)
  ;; (setq gc-cons-threshold 50000000)
  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; revert buffers automatically when underlying files are changed externally
  (global-auto-revert-mode t)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (global-hl-line-mode t) ;; highlight current line
#+END_SRC
** flyspell
#+BEGIN_SRC emacs-lisp
    (use-package auto-dictionary
      :demand t
      :init
      (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))
    (setq-default ispell-really-hunspell t)
    (setq-default ispell-program-name "hunspell")
    (setq ispell-dictionary "en_US")
    (setq ispell-local-dictionary-alist
          '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)
            ("de_AT" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
    (use-package flyspell
      :demand t
      :init
      ;; to slow for magit commit for example:
      ;;(add-hook 'flyspell-mode-hook #'flyspell-buffer)
      ;; didn't work with magit commit? why?
      ;;(add-hook 'text-mode-local-vars-hook #'flyspell-mode)
      ;;(add-hook 'prog-mode-local-vars-hook #'flyspell-prog-mode)
      (add-hook 'text-mode-hook #'flyspell-mode)
      (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq
   make-backup-files t
   version-control t   ; use numbers for backup files
   kept-new-versions 10
   kept-old-versions 0
   delete-old-versions t
   backup-by-copying t
   vc-make-backup-files t
   auto-save-default nil
   backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+END_SRC
** Disable Lockfiles
These are the Files creating in the current Directory for files that have not been saved yet #File#
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** MacOS
#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier nil)
  (setq mac-command-modifier 'meta)
#+END_SRC
* ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* GUI
** font
#+BEGIN_SRC emacs-lisp
  ;;(set-default-font "Iosevka-12:spacing=110")
  (setq default-frame-alist '((font . "Iosevka-12:spacing=110")))
#+END_SRC
** disable menubar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode -1)     ; disable the tool-bar
  (menu-bar-mode -1)     ; disable the menu-bar
  (global-linum-mode -1)  ; dont show line-numbers everywhere
  (show-paren-mode)
  ;;(electric-pair-mode 1)
#+END_SRC
** fringe
#+BEGIN_SRC emacs-lisp
  (define-fringe-bitmap 'tilde [64 168 16] nil nil 'center)
  (set-fringe-bitmap-face 'tilde 'fringe)
#+END_SRC
** Themes
#+begin_src emacs-lisp
  ;;(use-package challenger-deep-theme
    ;;:demand t
    ;;:config
    ;;(load-theme 'challenger-deep t))
  (add-to-list 'custom-theme-load-path "~/Documents/challenger-deep/emacs/")
  (load-theme 'challenger-deep t)

  (use-package all-the-icons :demand t)
  (use-package all-the-icons-dired
      :after (all-the-icons)
      :init
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ivy
      :after (all-the-icons projectile ivy counsel counsel-projectile)
      :config
      (setq all-the-icons-ivy-file-commands
            '(counsel-find-file
              counsel-file-jump
              counsel-recentf
              counsel-projectile-find-file
              counsel-projectile-find-dir
              counsel-projectile))
      (all-the-icons-ivy-setup))
#+end_src
* custom Functions
#+BEGIN_SRC emacs-lisp
  (defconst org-config-file "~/.emacs.d/config.org")
  (defun my-funcs/reload-dotfile ()
    "Reload '~/.emacs.d/init.el'."
    (interactive)
    (load-file "~/.emacs.d/init.el"))
  (defun my-funcs/open-dotfile ()
    "Open '~/.emacs.d/config.org."
    (interactive)
    (find-file org-config-file))
  (defun my-funcs/open-snippet-dir ()
    (interactive)
    (let* ((dir (file-name-as-directory (car yas-snippet-dirs)))
           (path (concat dir (symbol-name major-mode))))
      (dired path)))
  (defun my-funcs/flash-region (start end)
    "Makes the region between START and END change color for a moment"
    (let ((overlay (make-overlay start end)))
      (overlay-put overlay 'face 'swiper-match-face-4)
      (run-with-timer 0.2 nil 'delete-overlay overlay)))
  (defun my-funcs/what-face (pos)
    "Tells you the name of the face (point) is on."
    (interactive "d")
    (let ((hl-line-p (bound-and-true-p hl-line-mode)))
      (if hl-line-p (hl-line-mode -1))
      (let ((face (or (get-char-property (point) 'read-face-name)
                      (get-char-property (point) 'face))))
        (if face (message "Face: %s" face) (message "No face at %d" pos)))
      (if hl-line-p (hl-line-mode 1))))

  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.
     With a prefix ARG prompt for a file to visit.
     Will also prompt for a file to visit if current
     buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
* dir-locals hook
#+begin_src emacs-lisp
(defun run-local-vars-mode-hook ()
  "Run a hook for the major-mode after the local variables have been processed."
  (run-hooks (intern (format "%S-local-vars-hook" major-mode))))
(add-hook 'hack-local-variables-hook #'run-local-vars-mode-hook)
#+end_src
** Session save/restore
#+BEGIN_SRC emacs-lisp
  (require 'desktop)
  (defvar my-desktop-session-dir
    (concat (getenv "HOME") "/.emacs.d/desktop/")
    "*Directory to save desktop sessions in")
  (defvar my-desktop-session-name-hist nil
    "Desktop session name history")
  (defun my-desktop-save (&optional name)
    "Save desktop by name."
    (interactive)
    (unless name
      (setq name (my-desktop-get-session-name "Save session" t)))
    (when name
      (make-directory (concat my-desktop-session-dir name) t)
      (desktop-save (concat my-desktop-session-dir name) t)))
  (defun my-desktop-save-and-clear ()
    "Save and clear desktop."
    (interactive)
    (call-interactively 'my-desktop-save)
    (desktop-clear)
    (setq desktop-dirname nil))
  (defun my-desktop-read (&optional name)
    "Read desktop by name."
    (interactive)
    (unless name
      (setq name (my-desktop-get-session-name "Load session")))
    (when name
      (desktop-clear)
      (desktop-read (concat my-desktop-session-dir name))))
  (defun my-desktop-change (&optional name)
    "Change desktops by name."
    (interactive)
    (let ((name (my-desktop-get-current-name)))
      (when name
        (my-desktop-save name))
      (call-interactively 'my-desktop-read)))
  (defun my-desktop-name ()
    "Return the current desktop name."
    (interactive)
    (let ((name (my-desktop-get-current-name)))
      (if name
          (message (concat "Desktop name: " name))
        (message "No named desktop loaded"))))
  (defun my-desktop-get-current-name ()
    "Get the current desktop name."
    (when desktop-dirname
      (let ((dirname (substring desktop-dirname 0 -1)))
        (when (string= (file-name-directory dirname) my-desktop-session-dir)
          (file-name-nondirectory dirname)))))
  (defun my-desktop-get-session-name (prompt &optional use-default)
    "Get a session name."
    (let* ((default (and use-default (my-desktop-get-current-name)))
           (full-prompt (concat prompt (if default
                                           (concat " (default " default "): ")
                                         ": "))))
      (completing-read full-prompt (and (file-exists-p my-desktop-session-dir)
                                        (directory-files my-desktop-session-dir))
                       nil nil nil my-desktop-session-name-hist default)))
  (defun my-desktop-kill-emacs-hook ()
    "Save desktop before killing emacs."
    (when (file-exists-p (concat my-desktop-session-dir "last-session"))
      (setq desktop-file-modtime
            (nth 5 (file-attributes (desktop-full-file-name (concat my-desktop-session-dir "last-session"))))))
    (my-desktop-save "last-session"))
  (add-hook 'kill-emacs-hook 'my-desktop-kill-emacs-hook)
#+END_SRC
* Evil
** initialize
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq-default evil-search-module 'evil-search
                  evil-shift-width 2
                  ;; prevent esc-key from translating to meta-key in terminal mode
                  evil-esc-delay 0
                  evil-want-Y-yank-to-eol t)
    :config
    (evil-set-initial-state 'package-menu-mode 'normal)
    (evil-set-initial-state 'help-mode 'normal)
    (evil-set-initial-state 'ibuffer-mode 'normal)
    (evil-set-initial-state 'pdf-view-mode 'normal)
    ;;(setq evil-emacs-state-modes nil)
    ;;(setq evil-insert-state-modes nil)
    ;;(setq evil-motion-state-modes nil)

    (evil-mode t)
    )
#+end_src
** snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :demand t
    :config
    (yas-global-mode 1))
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :demand t
    :config
    (defhydra hydra-zoom ()
      "Zoom"
      ("u" zoom-frm-unzoom "unzoom")
      ("i" text-scale-increase "in Buffer")
      ("I" zoom-frm-in "in Frame")
      ("O" zoom-frm-out "out Frame")
      ("o" text-scale-decrease "out Buffer"))
    (defhydra hydra-window-resize ()
      "Window resizing"
      ("j" my-funcs/resize-window-down "down")
      ("k" my-funcs/resize-window-up "up")
      ("l" my-funcs/resize-window-right "right")
      ("h" my-funcs/resize-window-left "left")))
  (defhydra hydra-projectile (:color teal :columns 4)
    "Projectile"
    ("f"   counsel-projectile-find-file                "Find File")
    ("r"   counsel-projectile-recentf                  "Recent Files")
    ("z"   counsel-projectile-cache-current-file       "Cache Current File")
    ("x"   counsel-projectile-remove-known-project     "Remove Known Project")
    ("d"   counsel-projectile-find-dir                 "Find Directory")
    ("b"   counsel-projectile-switch-to-buffer         "Switch to Buffer")
    ("c"   counsel-projectile-invalidate-cache         "Clear Cache")
    ("X"   counsel-projectile-cleanup-known-projects   "Cleanup Known Projects")
    ("o"   counsel-projectile-multi-occur              "Multi Occur")
    ("p"   counsel-projectile-switch-project           "Switch Project")
    ("k"   counsel-projectile-kill-buffers             "Kill Buffers")
    ("q"   nil "Cancel" :color blue))
#+END_SRC
** custom text objects
*** sexp
#+BEGIN_SRC emacs-lisp
     ;;Evil smartparens text objects
     (evil-define-text-object evil-a-sexp (count &optional beg end type)
       "outer sexp"
       (evil-range (progn
                     (save-excursion
                       (sp-beginning-of-sexp)
                       (- (point) 1)))
                   (progn
                     (save-excursion
                       (sp-end-of-sexp)
                       (+ (point) 1)))))
     (define-key evil-outer-text-objects-map "f" 'evil-a-sexp)
     (evil-define-text-object evil-i-sexp (count &optional beg end type)
       "inner sexp"
       (evil-range (progn
                     (save-excursion
                       (sp-beginning-of-sexp)
                       (point)))
                   (progn
                     (save-excursion
                       (sp-end-of-sexp)
                       (point)))))
     (define-key evil-inner-text-objects-map "f" 'evil-i-sexp)
     (evil-define-text-object evil-a-top-level-sexp (count &optional beg end type)
       "outer top level sexp"
       (evil-range (progn
                     (save-excursion
                       (beginning-of-defun)
                       (- (point) 1)))
                   (progn
                     (save-excursion
                       (end-of-defun)
                       (+ (point) 1)))))
     (define-key evil-outer-text-objects-map "F" 'evil-a-top-level-sexp)
     (evil-define-text-object evil-i-top-level-sexp (count &optional beg end type)
       "inner top level sexp"
       (evil-range (progn
                     (save-excursion
                       (beginning-of-defun)
                       (point)))
                   (progn
                     (save-excursion
                       (end-of-defun)
                       (point)))))
     (define-key evil-inner-text-objects-map "F" 'evil-i-top-level-sexp)
     (evil-define-text-object evil-a-lisp-element (count &optional beg end type)
       "outer sexp"
       (evil-range (progn
                     (save-excursion
                       ;;TODO
                       ))
                   (progn
                     (save-excursion
                       ;;TODO
                       ))))
     ;;(define-key evil-outer-text-objects-map "e" 'evil-a-lisp-element)
     (evil-define-text-object evil-i-lisp-element (count &optional beg end type)
       "inner sexp"
       (evil-range (progn
                     (save-excursion
                       ;;TODO
                       ))
                   (progn
                     (save-excursion
                       ;;TODO
                       ))))
     ;;(define-key evil-inner-text-objects-map "e" 'evil-i-lisp-element)
#+end_src
*** line text object
no mapping for that object
#+begin_src emacs-lisp
     (evil-define-text-object evil-i-line (count &optional beg end type)
       "inner line"
       (evil-range (progn
                     (save-excursion
                       (back-to-indentation)
                       (point)))
                   (progn
                     (save-excursion
                       (end-of-line)
                       (point)))))
     (define-key evil-inner-text-objects-map "l" 'evil-i-line)
     (evil-define-text-object evil-a-line (count &optional beg end type)
       "outer line"
       (evil-range (progn
                     (save-excursion
                       (evil-beginning-of-line)
                       (point)))
                   (progn
                     (save-excursion
                       (end-of-line)
                       (point)))))
     (define-key evil-outer-text-objects-map "l" 'evil-a-line)
#+END_SRC
** General (keybindings)
[[https://github.com/noctuid/general.el][general.el]]
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    ;;(general-evil-setup)
    ;; bind a key globally in normal state; keymaps must be quoted
    (setq general-default-keymaps 'evil-normal-state-map))
  ;;evil mappings
  (general-def 'normal
    "M-l" (lambda ()
            (interactive)
            (evil-window-vsplit)
            (evil-window-right 1))
    "M-h" (lambda ()
            (interactive)
            (evil-window-vsplit))
    "M-k" (lambda ()
            (interactive)
            (evil-window-split))
    "M-j" (lambda ()
            (interactive)
            (evil-window-split)
            (evil-window-down 1))
    "gS" 'my-funcs/open-snippet-dir
    "gs" 'save-buffer
    "`" 'evil-goto-mark-line
    "'" 'evil-goto-mark
    "C-h" 'evil-window-left
    "C-l" 'evil-window-right
    "C-k" 'evil-window-up
    "C-j" 'evil-window-down
    "g ." 'my-funcs/open-dotfile
    "g h" 'org-capture
    "g i" (lambda ()
            (interactive)
            (find-file (concat org-directory "/inbox.org")))
    "g l" 'org-agenda
    "g o" (lambda ()
            (interactive)
            (counsel-find-file org-directory))
    "] SPC" (lambda ()
              (interactive)
              (save-excursion
                (evil-open-below 1))
              (evil-normal-state))
    "[ SPC" (lambda ()
              (interactive)
              (save-excursion
                (evil-open-above 1))
              (evil-normal-state))
    )
  ;; named prefix key
  (setq my-leader "SPC")
  (general-def 'normal :prefix my-leader
    ;;"r" 'restart-emacs
    "p" 'hydra-projectile/body
    "q" 'evil-window-delete
    "k" 'kill-buffer
    "D" 'evil-delete-buffer
    "d" 'kill-this-buffer
    "SPC" 'ace-select-window
    "s" 'dumb-jump-go
    "S" 'dumb-jump-go-prompt
    ;;"h" (general-simulate-keys "C-h")
    "h k" 'describe-key
    "h SPC" 'which-key-show-top-level
    "h v" 'describe-variable
    "h f" 'describe-function
    "h m" 'describe-mode
    "<return>" 'my/projectile-multi-term
    "S-<return>" 'multi-term
    ;;  Avoiding CTRL
    "W" (general-simulate-key "C-w")
    "x" (general-simulate-key "C-x")
    "c" (general-simulate-keys "C-c")
    "i" 'ibuffer
    "t" 'counsel-projectile-find-file
    "/" 'counsel-rg-project
    "e" 'counsel-projectile-switch-to-buffer
    "g s" 'magit-status
    "g t" 'git-timemachine
    "g n" 'git-gutter:next-hunk
    "g p" 'git-gutter:previous-hunk
    "g r" 'git-gutter:revert-hunk
    "g h s" 'git-gutter:stage-hunk
    "l" 'evil-avy-goto-line
    "u" 'undo-tree-visualize
    "b" 'ivy-switch-buffer
    "n" 'next-error
    "N" 'previous-error
    "z" 'hydra-zoom/body
    "o" (lambda () (interactive) (dired "."))
    "O" 'dired
    "f" 'counsel-find-file)
  (setq my-leader2 ",")
  (setq local-leader "\\")
#+END_SRC
** evil-surround
#+begin_src emacs-lisp
    (use-package evil-surround
      :demand t
      :config
      (global-evil-surround-mode))
#+end_src
** aggressive indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :config)
#+end_src
** evil-args
#+begin_src emacs-lisp
  (use-package evil-args
    :demand t
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    )
#+end_src
** evil-indent-plus textobject
#+begin_src emacs-lisp
  (use-package evil-indent-plus
    :demand t
    :config
    ;; bind evil-indent-plus text objects
    (evil-indent-plus-default-bindings)
    )
#+end_src
** evil-numbers
increment and decrement numbers with c-a and c-x
#+begin_src emacs-lisp
    (use-package evil-numbers
      :commands (evil-numbers/inc-at-pt evil-numbers/dec-at-pt)
      :config
      (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
      (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt))
#+end_src
** evil-matchit
% to jump between matched tags
#+begin_src emacs-lisp
    (use-package evil-matchit
      :demand t
      :config
      (global-evil-matchit-mode 1))
#+end_src
** evil-exchange
#+begin_src emacs-lisp
   ;;gx to mark exchange second time to do it
   ;;gX to cancel
  (use-package evil-exchange
    :commands (evil-exchange))
  (setq lisp-modes '(clojure-mode
                     cider-clojure-interaction-mode
                     lisp-interaction-mode
                     cider-repl-mode
                     emacs-lisp-mode))
  (evil-define-operator evil-decide-change-fun (beg end)
    "decide which change function to use"
    (if (seq-contains lisp-modes major-mode)
        (evil-sp-change beg end)
      (evil-change beg end)))

  (general-def 'visual
    "c" 'evil-change)

  (general-def 'normal
    "c" (general-key-dispatch 'evil-decide-change-fun
          :name general-dispatch-evil-change-exchange
          "s" 'evil-surround-change
          "x" 'evil-exchange
          "X" 'evil-exchange-cancel))
#+end_src
** evil-commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
      :demand t
      :after (evil)
      :config
      (evil-commentary-mode))
#+end_src
** evil-anzu
#+begin_src emacs-lisp
  (use-package evil-anzu
      :demand t
      :after (evil)
      )
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (defhydra hydra-ibuffer-main (:color pink :hint nil)
    "
   ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
    _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
   _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
    _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
  "
    ("j" ibuffer-forward-line)
    ("RET" ibuffer-visit-buffer :color blue)
    ("k" ibuffer-backward-line)
    ("m" ibuffer-mark-forward)
    ("u" ibuffer-unmark-forward)
    ("*" hydra-ibuffer-mark/body :color blue)
    ("D" ibuffer-do-delete)
    ("S" ibuffer-do-save)
    ("a" hydra-ibuffer-action/body :color blue)
    ("g" ibuffer-update)
    ("s" hydra-ibuffer-sort/body :color blue)
    ("/" hydra-ibuffer-filter/body :color blue)
    ("q" ibuffer-quit "quit ibuffer" :color blue))
  (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                :after-exit (hydra-ibuffer-main/body))
    "Mark"
    ("*" ibuffer-unmark-all "unmark all")
    ("M" ibuffer-mark-by-mode "mode")
    ("m" ibuffer-mark-modified-buffers "modified")
    ("u" ibuffer-mark-unsaved-buffers "unsaved")
    ("s" ibuffer-mark-special-buffers "special")
    ("r" ibuffer-mark-read-only-buffers "read-only")
    ("/" ibuffer-mark-dired-buffers "dired")
    ("e" ibuffer-mark-dissociated-buffers "dissociated")
    ("h" ibuffer-mark-help-buffers "help")
    ("z" ibuffer-mark-compressed-file-buffers "compressed")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  (defhydra hydra-ibuffer-action (:color teal :columns 4
                                  :after-exit
                                  (if (eq major-mode 'ibuffer-mode)
                                      (hydra-ibuffer-main/body)))
    "Action"
    ("A" ibuffer-do-view "view")
    ("E" ibuffer-do-eval "eval")
    ("F" ibuffer-do-shell-command-file "shell-command-file")
    ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
    ("H" ibuffer-do-view-other-frame "view-other-frame")
    ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
    ("M" ibuffer-do-toggle-modified "toggle-modified")
    ("O" ibuffer-do-occur "occur")
    ("P" ibuffer-do-print "print")
    ("Q" ibuffer-do-query-replace "query-replace")
    ("R" ibuffer-do-rename-uniquely "rename-uniquely")
    ("T" ibuffer-do-toggle-read-only "toggle-read-only")
    ("U" ibuffer-do-replace-regexp "replace-regexp")
    ("V" ibuffer-do-revert "revert")
    ("W" ibuffer-do-view-and-eval "view-and-eval")
    ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
    ("b" nil "back"))
  (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
    "Sort"
    ("i" ibuffer-invert-sorting "invert")
    ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
    ("v" ibuffer-do-sort-by-recency "recently used")
    ("s" ibuffer-do-sort-by-size "size")
    ("f" ibuffer-do-sort-by-filename/process "filename")
    ("m" ibuffer-do-sort-by-major-mode "mode")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
    "Filter"
    ("m" ibuffer-filter-by-used-mode "mode")
    ("M" ibuffer-filter-by-derived-mode "derived mode")
    ("n" ibuffer-filter-by-name "name")
    ("c" ibuffer-filter-by-content "content")
    ("e" ibuffer-filter-by-predicate "predicate")
    ("f" ibuffer-filter-by-filename "filename")
    (">" ibuffer-filter-by-size-gt "size")
    ("<" ibuffer-filter-by-size-lt "size")
    ("/" ibuffer-filter-disable "disable")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  (general-define-key :keymaps '(ibuffer-mode-map)
                      :states '(normal)
                      "SPC" 'hydra-ibuffer-main/body
                      "j" 'ibuffer-forward-line
                      "k" 'ibuffer-backward-line
                      "J" 'ibuffer-jump-to-buffer)
#+end_src
** help
#+begin_src emacs-lisp
  (general-define-key :keymaps '(help-mode-map)
                      :states '(normal)
                      "C-o" 'help-go-back
                      "C-i" 'help-go-forward
                      "r" 'help-follow
                      "q" 'quit-window)
#+end_src
** package-menu
#+begin_src emacs-lisp
  (general-define-key :keymaps '(package-menu-mode-map)
                      :states '(normal)
                      "i" 'package-menu-mark-install
                      "U" 'package-menu-mark-upgrades
                      "d" 'package-menu-mark-delete

                      ;; undo
                      "u" 'package-menu-mark-unmark

                      ;; execute
                      "x" 'package-menu-execute
                      ;; "q" 'quit-window ; macros can make sense here.
                      "ZQ" 'evil-quit
                      "ZZ" 'quit-window)
#+end_src
** evil-replace-with-register
#+begin_src emacs-lisp
  (use-package evil-replace-with-register
    :demand t
    :after (evil)
    :config
    (setq evil-replace-with-register-key (kbd "gr"))
    (evil-replace-with-register-install))
#+end_src
** artist-mode
#+begin_src emacs-lisp
(add-hook 'artist-mode-hook #'(lambda () (evil-emacs-state)))
#+end_src
** company-mode
#+begin_src emacs-lisp
  (use-package company
   :demand t
   :config
   (global-company-mode)
   (setq company-idle-delay 0.2)
   (setq company-selection-wrap-around t)

   (define-key company-active-map [tab] 'company-complete)
   (define-key company-active-map (kbd "C-n") 'company-select-next)
   (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src
** narrowing
#+begin_src emacs-lisp
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))
(evil-define-operator evil-narrow-indirect (beg end type)
  "Indirectly narrow the region from BEG to END."
  (interactive "<R>")
  (narrow-to-region-indirect beg end))
(general-def 'normal :prefix my-leader
 "n" 'evil-narrow-indirect)
;;(general-vmap :prefix "SPC" "n" 'narrow-to-region-indirect)
#+end_src
* Package config
** Exec-path
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
      :demand t
      :config
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-copy-env "PGUSER")
        (exec-path-from-shell-copy-env "PGPASSWORD")
        (exec-path-from-shell-initialize)))
#+END_SRC
** Popup Window
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :demand t
    :config
    (progn
      (setq shackle-select-reused-windows nil) ; default nil
      (setq shackle-default-alignment 'below) ; default below
      (setq shackle-default-size 0.3) ; default 0.5
      (setq shackle-rules
            '(("*Warnings*"  :size 8  :noselect t)
              ("*Messages*"  :size 12 :noselect t)
              ("*Help*" :select t :align below :inhibit-window-quit nil :modeline nil)
              ("*Metahelp*" :size 0.3 :align left)
              ("*undo-tree*" :size 0.5 :align right)
              (alchemist-iex-mode :same t)
              (sql-interaction-mode :same t)
              (alchemist-test-report-mode :size 0.4 :align right :noselect t)
              ("*alchemist help*" :same t)
              ("*HTTP Response*" :size 0.3 :align below)
              (cider-repl-mode :same t)
              (cider-inspector-mode :size 0.3 :align above)
              ("*cider-error*" :size 0.5 :align right)
              (ivy-occur-grep-mode :size 0.3 :align below)
              ))
      (shackle-mode 1)
      )
    )
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :config
    (put-clojure-indent 'defui '(2 nil nil (1))))
  (use-package clj-refactor
    :config)
  (use-package cider
    :demand t
    :config
    (setq cider-repl-display-in-current-window nil)
    (setq cider-repl-use-pretty-printing t)
    (autoload 'cider--make-result-overlay "cider-overlays")
    (defun my-funcs/eval-overlay (value point)
      (cider--make-result-overlay (format "%S" value)
        :where point
        :duration 'command)
      ;; Preserve the return value.
      value)
    (advice-add 'eval-last-sexp :filter-return
                (lambda (r)
                  (my-funcs/eval-overlay r (point))))
    (advice-add 'eval-defun :filter-return
                (lambda (r)
                  (my-funcs/eval-overlay
                   r
                   (save-excursion
                     (end-of-defun)
                     (point))))))
  (use-package cider-hydra
    :after (clojure-mode)
    :init
    (add-hook 'cider-mode-hook #'cider-hydra-mode))

  (evil-define-operator evil-eval-clojure-text-object (beg end)
    "Evil operator for evaluating code."
    :move-point nil
    (save-excursion
      (my-funcs/flash-region beg end)
      (cider-eval-region beg end)))
  (defun my/goto-or-switch-back-from-repl ()
    (interactive)
    (if (eq major-mode 'cider-repl-mode)
        (cider-switch-to-last-clojure-buffer)
      (cider-switch-to-repl-buffer)))
  (general-def 'normal ':keymaps '(cider-inspector-mode-map)
    "n" 'cider-inspector-next-page
    "N" 'cider-inspector-prev-page
    "RET" 'cider-inspector-operate-on-point
    "d" 'cider-inspector-pop
    "r" 'cider-inspector-refresh)
  (general-def 'normal '(cider-popup-buffer-mode-map cider-stacktrace-mode-map)
    "q" 'cider-popup-buffer-quit)
  (general-def 'normal '(clojure-mode-map cider-repl-mode-map cider-clojure-interaction-mode-map)
    :prefix local-leader
    "r" 'cider-hydra-repl/body
    "j" 'cider-jack-in
    "i" 'cider-inspect-last-result
    "g" 'my/goto-or-switch-back-from-repl
    "c" 'cider-jack-in
    "d" 'cider-hydra-doc/body
    "e" 'cider-hydra-eval/body
    "q" 'hydra-cljr-help-menu/body)
  (general-def 'normal '(clojure-mode-map cider-repl-mode-map cider-clojure-interaction-mode-map)
    "c" (general-key-dispatch 'general-dispatch-evil-change-exchange
          :name general-dispatch-change-clojure
          "p" (general-key-dispatch 'evil-eval-clojure-text-object
                :name general-dispatch-eval-clojure-text-object
                "p" (lambda ()
                      (interactive)
                      (let* ((range (evil-a-sexp))
                             (beg (elt range 0))
                             (end (elt range 1)))
                        (evil-eval-clojure-text-object beg end))))
          ;; could be used for other operators where there
          ;; isn't an existing command for the linewise version:
          ;; "c" (general-simulate-keys ('evil-change "c"))
          ))
#+end_src
** elisp
#+BEGIN_SRC emacs-lisp
  ;;todo only for elisp!
  (evil-define-operator evil-eval-elisp-text-object (beg end)
    "Evil operator for evaluating code."
    :move-point nil
    (save-excursion
      (let (eval-str
            value)
        (setq eval-str (buffer-substring beg end))
        (setq value (eval (car (read-from-string eval-str)) lexical-binding))
        (my-funcs/flash-region beg end)
        (my-funcs/eval-overlay value end)
        (message (format "%s" value)))))
  (general-define-key :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
                      :states '(normal)
                      "c" (general-key-dispatch 'general-dispatch-evil-change-exchange
                            :name general-dispatch-change-elisp
                            "p" (general-key-dispatch 'evil-eval-elisp-text-object
                                  :name general-dispatch-eval-elisp-text-object
                                  "p" (lambda ()
                                        (interactive)
                                        (let* ((range (evil-a-sexp))
                                               (beg (elt range 0))
                                               (end (elt range 1)))
                                          (evil-eval-elisp-text-object beg end))))))
  ;;(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  ;;(add-hook 'lisp-interaction-mode-hook #'aggressive-indent-mode)
#+END_SRC
** lisp general
#+BEGIN_SRC emacs-lisp
    (defun maybe-join-lisp-line (orig-fun &rest r)
      (apply orig-fun r)
      (when (string-match-p "^\s*[\])}]+\s*$" (thing-at-point 'line t))
        (evil-previous-line-first-non-blank)
        (save-excursion (join-line 1))))
    (advice-add 'evil-sp-delete-line :around 'maybe-join-lisp-line)
    (advice-add 'evil-sp-delete :around 'maybe-join-lisp-line)
    (defun in-sexp ()
      (> (nth 0 (syntax-ppss)) 0))
    (defun next-sexp ()
      "Go to the next sexp"
      (interactive))
    (defun next-paren (&optional closing)
      "Go to the next/previous closing/opening parenthesis/bracket/brace."
      (if closing
          (let ((curr (point)))
            (forward-char)
            (unless (eq curr (search-forward-regexp "[])}]"))
              (backward-char)))
        (search-backward-regexp "[[({]")))
    (defun prev-opening-paren ()
      "Go to the next closing parenthesis."
      (interactive)
      (next-paren))
    (defun next-closing-paren ()
      "Go to the next closing parenthesis."
      (interactive)
      (next-paren 'closing))
    (defun open-paren-around (paren element beginning)
      (when (and element (in-sexp))
        (next-paren))
      (sp-wrap-with-pair paren)
      (if beginning
          (progn
            (insert " ")
            (evil-backward-char 1))
        (progn
          (evilmi-jump-items)
          (evil-forward-char 1)
          (insert " ")))
      (evil-insert nil))
    (evil-define-command lisp-next-paren (count)
      (interactive "<c>")
      (if count
          (dotimes (number count)
            (sp-next-sexp))
        (sp-next-sexp)))
    (evil-define-command lisp-previous-paren (count)
      (interactive "<c>")
      (if count
          (dotimes (number count)
            (sp-previous-sexp))
        (sp-previous-sexp)))

    (general-def 'normal ;;all-lisp-mode-maps
          '(clojure-mode-map
            cider-clojure-interaction-mode-map
            lisp-interaction-mode-map
            cider-repl-mode-map
            emacs-lisp-mode-map)
       :prefix my-leader2
       "W" (lambda ()
             (interactive)
             (open-paren-around "(" t nil))
       "w" (lambda ()
             (interactive)
             (open-paren-around "(" t t))
       "e)" (lambda ()
              (interactive)
              (open-paren-around "(" t nil))
       "e(" (lambda ()
              (interactive)
              (open-paren-around "(" t t))
       "e}" (lambda ()
              (interactive)
              (open-paren-around "{" t nil))
       "e{" (lambda ()
              (interactive)
              (open-paren-around "{" t t))
       "e]" (lambda ()
              (interactive)
              (open-paren-around "[" t nil))
       "e[" (lambda ()
              (interactive)
              (open-paren-around "[" t t))
       "e}" (lambda ()
              (interactive)
              (open-paren-around "{" t nil))
       "e{" (lambda ()
              (interactive)
              (open-paren-around "{" t t))
       "i" (lambda ()
             (interactive)
             (open-paren-around "(" nil t))
       "I" (lambda ()
             (interactive)
             (open-paren-around "(" nil nil))
       "(" (lambda ()
             (interactive)
             (open-paren-around "(" nil t))
       ")" (lambda ()
             (interactive)
             (open-paren-around "(" nil nil))
       "[" (lambda ()
             (interactive)
             (open-paren-around "[" nil t))
       "]" (lambda ()
             (interactive)
             (open-paren-around "[" nil nil))
       "{" (lambda ()
             (interactive)
             (open-paren-around "{" nil t))
       "}" (lambda ()
             (interactive)
             (open-paren-aroundn "{" nil nil))
       "@" 'sp-splice-sexp
       "o" (lambda ()
             (interactive)
             (when (string-match-p "^[^\[({]" (thing-at-point 'sexp t))
               (sp-backward-up-sexp))
             (sp-raise-sexp))
       "O" 'sp-raise-sexp)

    (general-def 'normal ;;all-lisp-mode-maps
  '(clojure-mode-map
            cider-clojure-interaction-mode-map
            lisp-interaction-mode-map
            cider-repl-mode-map
            emacs-lisp-mode-map)

       ;;c is defined in vim-exchange
       "W" 'lisp-next-paren
       "B" 'lisp-previous-paren
       "(" 'sp-backward-up-sexp
       ")" (lambda ()
             (interactive)
             (sp-backward-up-sexp)
             (evilmi-jump-items))
       ">" (general-key-dispatch 'evil-shift-right
             "I" (lambda ()
                   (interactive)
                   (sp-end-of-sexp)
                   (when (not (char-equal (preceding-char)  ?  ))
                     (insert " "))
                   (evil-insert nil))
             "f" (lambda ()
                   (interactive)
                   (when (in-sexp)
                     ))
             ")" 'sp-forward-slurp-sexp
             "(" 'sp-backward-barf-sexp)
       "<" (general-key-dispatch 'evil-shift-left
             "I" (lambda ()
                   (interactive)
                   (sp-beginning-of-sexp)
                   (when (not (char-equal (following-char)  ?  ))
                     (insert " ")
                     (evil-backward-char))
                   (evil-insert nil))
             ")" 'sp-forward-barf-sexp
             "(" 'sp-backward-slurp-sexp)
       "C" 'evil-sp-change-line
       "d" 'evil-sp-delete
       "D" 'evil-sp-delete-line)
#+END_SRC
** which-key
#+begin_src emacs-lisp
    (use-package which-key
      :demand t
      :config
      (which-key-mode))
#+END_SRC
** Terminal
                        :prefix my-leader2
                        "n" 'git-timemachine-show-next-revision
                        "p" 'git-timemachine-show-previous-revision
                        "r" 'git-timemachine-show-current-revision
                        "q" 'git-timemachine-quit))
#+END_SRC
#+BEGIN_SRC emacs-lisp
    (use-package git-gutter-fringe)
    (use-package fringe-helper)
    (require 'fringe-helper)
    (require 'git-gutter-fringe)
    (fringe-mode 3)
    ;; (push `(left-fringe  . 3) default-frame-alist)
    ;; (push `(right-fringe . 3) default-frame-alist)
    ;; ;; slightly larger default frame size on startup
    ;; (push '(width . 120) default-frame-alist)
    ;; (push '(height . 40) default-frame-alist)
    ;; (define-fringe-bitmap 'tilde [64 168 16] nil nil 'center)
    ;; (set-fringe-bitmap-face 'tilde 'fringe)
    ;; colored fringe "bars"
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
      nil nil 'center)
    (advice-add 'evil-force-normal-state :after 'git-gutter)
    (add-hook 'focus-in-hook 'git-gutter:update-all-windows)

  (use-package magit
    :config
    ;; full screen magit-status
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
    (require 'evil-magit))

  (use-package evil-magit
    :after (magit))
  (use-package git-timemachine
    :after general
    :config
    (general-define-key :keymaps '(git-timemachine-mode-map)
                        :states '(normal)
                        :prefix my-leader2
                        "n" 'git-timemachine-show-next-revision
                        "p" 'git-timemachine-show-previous-revision
                        "r" 'git-timemachine-show-current-revision
                        "q" 'git-timemachine-quit))
#+END_SRC
** imenu-list
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :demand t
    :config
    (setq imenu-list-focus-after-activation t)
    (general-define-key :keymaps 'imenu-list-major-mode-map
                        :states '(normal)
                        "|" 'imenu-list-minor-mode
                        "RET" 'imenu-list-goto-entry
                        "i" 'imenu-list-goto-entry
                        "q" 'imenu-list-quit-window)
    )
#+END_SRC
** Org Mode
*** org settings
**** adapt indentation
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC
**** enable syntax highlighting in org-babel source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
**** COMMENT Org indent Mode
#+BEGIN_SRC emacs-lisp
    (setq org-startup-indented t)
#+END_SRC
**** set org default directory
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/")
        org-directory "~/Dropbox/org/"
        org-archive-location "~/Dropbox/org-archive/%s::")
#+END_SRC
**** org src block indention
#+BEGIN_SRC emacs-lisp
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 2)
#+END_SRC

**** capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
           '(("i"
              "INBOX"
              entry
              (file "inbox.org")
              "* %?")
             ("t"
              "INBOX TODO"
              entry
              (file "inbox.org")
              "* TODO %? SCHEDULED: %t")))
     (setq org-refile-use-outline-path 'file)
     (setq org-outline-path-complete-in-steps nil)
     ;; use a depth level of 6 max
     (setq org-refile-targets
           '((org-agenda-files . (:maxlevel . 4))))
     #+END_SRC
     (setq-default org-catch-invisible-edits 'smart)
**** smart invisible edits
     #+BEGIN_SRC emacs-lisp
(setq-default org-catch-invisible-edits 'smart)
     #+END_SRC
**** COMMENT hide leading stars
     #+BEGIN_SRC emacs-lisp
(setq-default org-hide-leading-stars t)
     #+END_SRC
*** COMMENT org-bullets (pretty bullets)
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :demand t
    :init
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode 1))))
#+END_SRC
*** ellipsis
#+BEGIN_SRC emacs-lisp
(setq-default org-ellipsis (concat " " (all-the-icons-faicon "caret-down")))
#+END_SRC
*** blank before new entry
#+BEGIN_SRC emacs-lisp
(setq-default org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
#+END_SRC
*** org-Reveal (HTML presentations)
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal)
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;;(setq org-reveal-mathjax t)
  (use-package htmlize)
#+END_SRC
*** evil keybindings in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package worf
    :init
    (add-hook 'org-mode-hook 'worf-mode))

  (defhydra myorg-hydra-change (:hint nil)
    "
  ^ ^ _k_ ^ ^    _t_ags    _p_rop | _x_:archive
  _h_ ^+^ _l_    _n_ame    _e_ol  |
  ^ ^ _j_ ^ ^    ^ ^       ^ ^    |
  "
    ;; arrows
    ("j" org-metadown)
    ("k" org-metaup)
    ("h" org-metaleft)
    ("l" org-metaright)

    ("e" move-end-of-line :exit t)
    ;; misc
    ("p" org-set-property :exit t)
    ("t" org-set-tags :exit t)
    ("n" worf-change-name :exit t)
    ("x" org-archive-subtree-default-with-confirmation :exit t)
    ("q" nil)
    ("c" nil))


  (defun my-org-before-or-after (before)
    (if before
        (evil-insert-line nil)
      (evil-append-line nil)))

  (defun my-org-new-item (before)
    (if (org-at-heading-p)
        (progn
          (my-org-before-or-after before)
          (if before
              (org-insert-heading)
              (org-insert-heading-respect-content)))
      (if (org-at-item-checkbox-p)
          (progn
            (my-org-before-or-after before)
            (org-insert-todo-heading 1))
        (if (org-at-item-p)
          (progn
            (my-org-before-or-after before)
            (org-insert-item))))))

  (defun my-org-new-item-before ()
    (interactive)
    (my-org-new-item t))

  (defun my-org-new-item-after ()
    (interactive)
    (my-org-new-item nil))

    (general-define-key :keymaps 'org-mode-map
                        :states '(normal)
                        "TAB" 'org-cycle
                        "<" 'org-metaleft
                        ">" 'org-metaright
                        "|" 'imenu-list-minor-mode
                        "RET" (lambda ()
                                (interactive)
                                (if (org-in-src-block-p)
                                    (org-edit-special)
                                  (if (org-at-item-checkbox-p)
                                      (org-toggle-checkbox)
                                      (org-open-at-point)
                                      ))
                                (evil-normal-state)))
    (general-define-key :prefix my-leader2
                        :keymaps 'org-mode-map
                        :states '(normal)
                        ;;"o" (lambda ()
                              ;;(interactive)
                              ;;(org-insert-heading-respect-content)
                              ;;(evil-insert-state))
                        "o" 'my-org-new-item-after
                        "O" 'my-org-new-item-before
                        "a" (lambda ()
                              (interactive)
                              (org-insert-heading-respect-content)
                              (org-demote-subtree)
                              (evil-insert-state))
                        "x" 'org-archive-subtree-default-with-confirmation
                        "s" 'org-schedule
                        "r" 'org-refile
                        "n" 'org-narrow-to-subtree
                        "w" 'widen
                        "t" 'org-todo
                        "T" 'org-set-tags
                        "p" 'org-insert-link
                        "y" 'org-store-link
                        "c" 'myorg-hydra-change/body
                        "l" 'worf-right
                        "g" 'worf-goto
                        "j" 'worf-down
                        "k" 'worf-up
                        "h" 'worf-left
                        "H" (lambda ()
                              (interactive)
                              (worf-left)
                              (org-cycle)))
    ;; key for exiting src edit mode
    (general-define-key :keymaps 'org-src-mode-map
                        :states '(normal)
                        "RET" 'org-edit-src-exit)
#+END_SRC
*** open source code in same window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :demand t
    :config
    (use-package evil-smartparens
      :demand t
      :config)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'clojure-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
    (sp-local-pair 'clojure-interaction-mode "'" nil :actions nil)
    (sp-local-pair 'cider-repl-mode "'" nil :actions nil)
    (smartparens-global-mode 1)
    )
  ;;(advice-add 'evil-sp-delete :after')
  ;;(general-define-key ')
#+END_SRC
** Latex
*** AucTex
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :init
    (add-hook 'latex-mode-local-vars-hook '(lambda () (setq TeX-command-default "latexmk")))
    (add-hook 'latex-mode-local-vars-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (push
                 '("latexmk" "latexmk -pdf -pvc %s" TeX-run-TeX nil t
                   :help "Run latexmk on file")
                 TeX-command-list)))
    :config
    (auctex-latexmk-setup))

  (setq-default TeX-quote-after-quote t)

#+END_SRC
*** Bibtex
#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex)
#+END_SRC
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :demand t
    :config
    ;; test fn in hashtabe has to be equal because we will use strings as keys
    (setq my-projects-loaded (make-hash-table :test 'equal))
    ;;(setq projectile-completion-system 'ivy)
    (projectile-global-mode))

  (use-package counsel-projectile
    :after (projectile))
#+end_src
** ag
#+begin_src emacs-lisp
  (use-package ag)
#+end_src
** popup (dependency)
#+begin_src emacs-lisp
  (use-package popup
    :demand t)
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :demand t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'cider-repl-mode #'rainbow-delimiters-mode)
    )
#+end_src
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-auto-save-history t
            undo-tree-visualizer-diff t
            undo-tree-visualizer-timestamps t
            undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))))
#+end_src
** recentf
for keeping track of recent files, provides helm-recentf with data
#+begin_src emacs-lisp
     (use-package recentf
       :demand t
       :config
       (recentf-mode 1)
       )
#+end_src
** ivy
http://oremacs.com/swiper/
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :demand t
      :config
      ;; regex order
      (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
      (define-key ivy-mode-map [escape] 'minibuffer-keyboard-quit)
      (define-key ivy-minibuffer-map (kbd "C-i") 'ivy-call)
      (define-key ivy-minibuffer-map (kbd "C-o") 'ivy-occur)
    (general-define-key :keymaps '(ivy-occur-grep-mode-map)
                        :states '(normal)
                        "q" 'evil-delete-buffer)
      (defvar pop-target-window)
      (make-variable-buffer-local 'pop-target-window)
      (advice-add 'compilation-goto-locus :around #'my-around-compilation-goto-locus)
      (defun my-around-compilation-goto-locus (orig-func &rest args)
        (advice-add 'pop-to-buffer :override #'my-pop-to-buffer)
        (apply orig-func args))
      (defun my-pop-to-buffer (buffer &optional action norecord)
        (advice-remove 'pop-to-buffer #'my-pop-to-buffer)
        (let ((from-buffer (current-buffer))
              (reused-window (display-buffer-reuse-window buffer nil)))
          (cond (reused-window
                 (select-window reused-window norecord))
                ((and (bound-and-true-p pop-target-window)
                      (window-live-p pop-target-window))
                 (window--display-buffer buffer pop-target-window 'reuse)
                 (select-window pop-target-window norecord))
                (t
                 (pop-to-buffer buffer action norecord)
                 (with-current-buffer from-buffer
                   (setq-local pop-target-window (selected-window)))))))
      (ivy-mode t))
    (use-package counsel
      :demand t
      :config)
    (use-package swiper
      :demand t
      :config
      (ivy-mode t))
    (use-package avy
      :demand t
      :config
      (defun avy-line-saving-column ()
        (interactive)
        (let ((col (current-column)))
          (avy-goto-line)
          (move-to-column col)))
      )
#+END_SRC
** hex colors
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config)
#+end_src
** command-log-mode
#+begin_src emacs-lisp
  (use-package command-log-mode
    :config)
#+end_src
** eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :demand t
    :config
    (eyebrowse-setup-opinionated-keys) ;set evil keybindings (gt gT)
    (eyebrowse-mode t))
#+end_src
** highlight-symbol
#+begin_src emacs-lisp
  (use-package highlight-symbol
    :config
    (setq highlight-symbol-idle-delay 1)
    (highlight-symbol-mode t)
    )
#+end_src
** dired
*** settings
Hide details by default (can be toggled with "(")
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode)))
#+END_SRC
move files to trash
#+BEGIN_SRC emacs-lisp
      (setq delete-by-moving-to-trash t)
#+END_SRC
Human readable filesize
#+BEGIN_SRC emacs-lisp
      (setq dired-listing-switches "-alh")
#+END_SRC
Prevents dired from creating an annoying popup when dired-find-alternate-file is called.
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
Recursive copy and deletion
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always)
#+END_SRC
*** dired-subtree
Show subtree when pressing i
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :after (dired)
    :config)
#+END_SRC
*** dired-ranger
Multi-stage copy/pasting of files and bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package dired-ranger
    :after (dired)
    :config)
#+END_SRC
*** dired-sidebar
#+begin_src emacs-lisp
    (use-package dired-sidebar
      :after (dired)
      :commands (dired-sidebar-toggle-sidebar)
      :init
      (general-define-key :prefix my-leader "TAB" 'dired-sidebar-toggle-sidebar))
#+end_src
*** Keybindings
#+BEGIN_SRC emacs-lisp
  (defun my/dired-up-directory ()
    "Take dired up one directory, but behave like dired-find-alternative-file (leave no orphan buffer)"
    (interactive)
    (let ((old (current-buffer)))
      (dired-up-directory)
      (kill-buffer old)))
  (defun my/dired-create-file (file)
    (interactive
     (list
      (read-file-name "Create file: " (dired-current-directory))))
    (write-region "" nil (expand-file-name file) t)
    (dired-add-file file)
    (revert-buffer)
    (dired-goto-file (expand-file-name file)))
  (general-define-key :keymaps '(dired-mode-map)
                      :states '(normal)
                      "h" 'my/dired-up-directory
                      "DEL" 'my/dired-up-directory
                      "RET" 'dired-find-alternate-file
                      "TAB" 'dired-subtree-toggle
                      "l" 'dired-find-alternate-file
                      "c" 'dired-do-rename
                      "C" 'dired-do-copy
                      "y" 'dired-ranger-copy
                      "p" 'dired-ranger-paste
                      "v" 'dired-ranger-move
                      "R" 'dired-do-redisplay
                      "r" 'wdired-change-to-wdired-mode
                      "f" 'counsel-file-jump
                      "o" 'my/dired-create-file
                      "O" 'dired-create-directory
                      "n" 'evil-ex-search-next
                      "N" 'evil-ex-search-previous
                      "q" 'kill-this-buffer
                      "!" 'dired-do-shell-command)
#+END_SRC
** restclient
#+begin_src emacs-lisp
  (use-package restclient)
#+end_src
** ejc-sql
#+begin_src emacs-lisp
  (use-package ejc-sql)
#+end_src
** sql
#+begin_src emacs-lisp
  (use-package sqlup-mode
    :config
    (add-hook 'sql-mode-hook (lambda () (sqlup-mode 1))))
#+end_src
** web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq css-indent-offset 2)
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    )
#+end_src
** javascript
#+begin_src emacs-lisp
   (use-package js2-mode
     :init
     ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
     (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
     (setq
      js2-skip-preprocessor-directives nil   ; allow shebangs in js-files (for node)
      ;; default values for indentation (possibly overwritten by editorconfig)
      js2-basic-offset 2
      js-indent-level 2
      js-expr-indent-offset -2)
     :config
     ;; do not show errors (use flycheck for that)
     (js2-mode-hide-warnings-and-errors))

   (use-package prettier-js
     :init
     (add-hook 'js2-mode-hook 'prettier-js-mode))

  (use-package add-node-modules-path
    :init
    (add-hook 'js2-mode-hook #'add-node-modules-path))

   (use-package rjsx-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)))

#+end_src
** elixir
#+begin_src emacs-lisp
  (use-package elixir-mode
    :config
    (plist-put evilmi-plugins 'elixir-mode '((evilmi-ruby-get-tag evilmi-ruby-jump))))
  (use-package alchemist
    :init
    (add-hook 'elixir-mode-hook #'alchemist-mode)
    :config
    (evil-define-operator evil-eval-elixir-text-object (beg end)
      "Evil operator for evaluating code."
      :move-point nil
      (save-excursion
        (my-funcs/flash-region beg end)
        (alchemist-iex-send-region beg end)))
    (general-define-key :prefix local-leader
                        :keymaps '(elixir-mode-map)
                        :states '(normal)
                        "f" (lambda ()
                              (interactive)
                              (projectile-with-default-dir (projectile-project-root)
                                (shell-command "mix format")))
                        "g" 'alchemist-goto-definition-at-point
                        "o" 'alchemist-goto-jump-back
                        "d p" 'alchemist-help-search-at-point
                        "d h" 'alchemist-help-history
                        "d s" 'alchemist-help
                        "t t" 'alchemist-mix-rerun-last-test
                        "t p" 'alchemist-mix-test-at-point
                        "t f" 'alchemist-mix-test-file
                        "t a" 'alchemist-mix-test
                        "t a" 'alchemist-mix-test
                        "r r" 'alchemist-iex-reload-module
                        "i i" 'alchemist-iex-run
                        "i p" 'alchemist-iex-project-run)
    (general-define-key :keymaps '(elixir-mode-map)
                        :states '(visual)
                        "c" (general-key-dispatch 'general-dispatch-evil-change-exchange
                              :name general-dispatch-change-elixir-visual
                              "p" 'alchemist-iex-send-region))
    (general-define-key :keymaps '(alchemist-test-report-mode-map)
                        :states '(normal)
                        "q" 'quit-window)
    (general-define-key :keymaps '(elixir-mode-map)
                        :states '(normal)
                        "c" (general-key-dispatch 'general-dispatch-evil-change-exchange
                              :name general-dispatch-change-elixir
                              "p" (general-key-dispatch 'evil-eval-elixir-text-object
                                    :name general-dispatch-eval-elixir-text-object
                                    "p" (lambda ()
                                          (interactive)
                                          (alchemist-iex-send-region
                                           (save-excursion
                                             (beginning-of-line)
                                             (point))
                                           (save-excursion
                                             (end-of-line)
                                             (point)))))))
    )
#+end_src
** erlang
#+begin_src emacs-lisp
  (use-package erlang
    :config)
#+end_src
** highlight-indent-guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-auto-character-face-perc 25)
    (setq highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src
** docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
      :config)
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
      :config)
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-enable-key "r")
    (setq wgrep-auto-save-buffer t)
    )
#+end_src
** ag, ripgrep,.. (global search)
#+begin_src emacs-lisp
  (setq ag-highlight-search t)
  (defun counsel-ag-project (&optional options)
    (interactive)
    (counsel-ag nil
                (projectile-project-root)
                options
                (projectile-prepend-project-name "ag")))
  (defun counsel-rg-project (&optional options)
    (interactive)
    (counsel-rg nil
                (projectile-project-root)
                options
                (projectile-prepend-project-name "rg")))
    ;;(setq ag-reuse-window 't)
#+end_src
** whitespace mode
#+begin_src emacs-lisp
  (use-package whitespace
    :demand t
    :config
    (setq-default
     whitespace-style '(face trailing))
    (setq whitespace-global-modes '(not
                                    dired-mode
                                    alchemist-test-mode
                                    alchemist-iex-mode
                                    cider-repl-mode))
    (global-whitespace-mode 1))
#+end_src
** markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :config
    (progn
      (pdf-tools-install)
      (add-hook 'pdf-view-mode-hook (lambda ()
                                      (setq display-line-numbers nil)))
      (general-define-key :keymaps '(pdf-view-mode-map)
                          :states '(normal)
                          ;;Navigation
                          "j"  'pdf-view-next-line-or-next-page
                          "k"  'pdf-view-previous-line-or-previous-page
                          "l"  'image-forward-hscroll
                          "h"  'image-backward-hscroll
                          "C-f"  'pdf-view-next-page
                          "C-b"  'pdf-view-previous-page
                          "u"  'pdf-view-scroll-down-or-previous-page
                          "d"  'pdf-view-scroll-up-or-next-page
                          "0"  'image-bol
                          "$"  'image-eol
                          "P" 'pdf-view-goto-page

                          ;; mark
                          "'" 'pdf-view-jump-to-register
                          "m" 'pdf-view-position-to-register

                          ;; zoom
                          "+" 'pdf-view-enlarge
                          "-" 'pdf-view-shrink
                          "0" 'pdf-view-scale-reset
                          "=" 'pdf-view-enlarge

                          ;; Copy
                          "y" 'pdf-view-kill-ring-save
                          ;; Scale/Fit
                          "W"  'pdf-view-fit-width-to-window
                          "H"  'pdf-view-fit-height-to-window
                          "zP"  'pdf-view-fit-page-to-window
                          "b"  'pdf-view-set-slice-from-bounding-box
                          "R"  'pdf-view-reset-slice
                          "zr" 'pdf-view-scale-reset
                          ;; Annotations
                          "aD" 'pdf-annot-delete
                          "at" 'pdf-annot-attachment-dired
                          "al" 'pdf-annot-list-annotations
                          "am" 'pdf-annot-add-markup-annotation
                          ;; Actions
                          "s" 'pdf-occur
                          "O" 'pdf-outline
                          "p" 'pdf-misc-print-document
                          "o" 'pdf-links-action-perform
                          "r" 'pdf-view-revert-buffer
                          "t" 'pdf-annot-attachment-dired
                          "n" 'pdf-view-midnight-minor-mode)

      (general-define-key :keymaps '(pdf-occur-buffer-mode-map)
                          :states '(normal)
                          (kbd "S-<return>") 'pdf-occur-goto-occurrence
                          (kbd "<return>") 'pdf-occur-view-occurrence
                          "r" 'pdf-occur-revert-buffer-with-args
                          "gd" 'pdf-occur-goto-occurrence
                          "gD" 'pdf-occur-view-occurrence
                          "q" 'evil-window-delete)))

#+end_src
** evil-goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :demand t
    :config
    (setq evil-goggles-duration 0.150)
    (evil-goggles-mode))
#+end_src
** editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :demand t
    :config
    (editorconfig-mode 1))
#+end_src
** fill-column-indicator
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :config
  (defun on-off-fci-before-company(command)
    (when (string= "show" command)
      (turn-off-fci-mode))
    (when (string= "hide" command)
      (turn-on-fci-mode)))
  (advice-add 'company-call-frontends :before #'on-off-fci-before-company)
  (add-hook 'prog-mode-hook #'fci-mode)
  (add-hook 'text-mode-hook #'fci-mode)
  (setq-default fci-rule-color "#906cff")
  )
#+end_src
** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :demand t
    :config
    (set-face-attribute 'aw-leading-char-face nil :foreground nil :inherit 'evil-goggles-delete-face)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-background nil
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window     "Ace - Delete Window")
            (?c aw-swap-window       "Ace - Swap Window")
            (?w aw-flip-window)
            (?o delete-other-windows)
            (?b balance-windows)
            ))

      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("h" shrink-window-horizontally "shrink horizontal")
        ("j" shrink-window "shrink vertical")
        ("k" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))
      (add-to-list 'aw-dispatch-alist '(?r hydra-window-size/body) t)

    (general-define-key :prefix my-leader "w" 'ace-window)

    (define-minor-mode my-ace-window-display-mode
      "Minor mode for showing the ace window key in the mode line."
      :global t
      (if my-ace-window-display-mode
          (progn
            (my-aw-update)
            (force-mode-line-update t)
            ;; Each time a window is created or deleted, Emacs
            ;; will run the `window-configuration-change-hook' -
            ;; exactly what I need to update `mode-line-format'.
            (add-hook 'window-configuration-change-hook 'my-aw-update))
        (remove-hook 'window-configuration-change-hook 'my-aw-update)))
    (defun my-aw-update ()
      "Update my-ace-window-path window parameter for all windows."
      (avy-traverse
       (avy-tree (aw-window-list) aw-keys)
       (lambda (path leaf)
         ;; Use `set-window-parameter' to store a variable for
         ;; each window.  Buffer local variables would not work
         ;; here, since one buffer can be displayed in multiple
         ;; windows, and those would need a different key each.
         (set-window-parameter
          leaf 'my-ace-window-path
          (propertize
           (apply #'string (reverse path)))))))
    (my-ace-window-display-mode)

    )
#+end_src
** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :demand t
    :config
    (add-hook 'desktop-after-read-hook 'powerline-reset)
    (defun make-rect (color height width)
      "Create an XPM bitmap."
      (when window-system
        (propertize
         " " 'display
         (let ((data nil)
               (i 0))
           (setq data (make-list height (make-list width 1)))
           (pl/make-xpm "percent" color color (reverse data))))))
    (defun powerline-mode-icon ()
      (let ((icon (all-the-icons-icon-for-buffer)))
        (unless (symbolp icon) ;; This implies it's the major mode
          (format " %s"
                  (propertize icon
                              'help-echo (format "Major-mode: `%s`" major-mode)
                              'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))))
    (defun powerline-modeline-vc ()
      (when vc-mode
        (let* ((text-props (text-properties-at 1 vc-mode))
               (vc-without-props (substring-no-properties vc-mode))
               (new-text (concat
                          " "
                          (all-the-icons-faicon "code-fork"
                                                :v-adjust -0.1)
                          vc-without-props
                          " "))
               )
          (apply 'propertize
                 new-text
                 'face (when (powerline-selected-window-active) 'success)
                 text-props
                 ))))
    (defun powerline-buffer-info ()
      (let ((proj (projectile-project-name)))
        (if (string= proj "-")
            (buffer-name)
          (concat
           (propertize (concat
                        proj)
                       'face 'warning)
           " "
           (buffer-name)))))
    (defun powerline-ace-window () (propertize (or (window-parameter (selected-window) 'my-ace-window-path) "") 'face 'error))
    (setq-default mode-line-format
                  '("%e"
                    (:eval
                     (let* ((active (powerline-selected-window-active))
                            (modified (buffer-modified-p))
                            (face1 (if active 'powerline-active1 'powerline-inactive1))
                            (face2 (if active 'powerline-active2 'powerline-inactive2))
                            (bar-color (cond ((and active modified) (face-foreground 'error))
                                             (active (face-background 'cursor))
                                             (t (face-background 'tooltip))))
                            (lhs (list
                                  (make-rect bar-color 30 3)
                                  (when modified
                                    (concat
                                     " "
                                     (all-the-icons-faicon "floppy-o"
                                                           :face (when active 'error)
                                                           :v-adjust -0.01)))
                                  " "
                                  (powerline-buffer-info)
                                  " "
                                  (powerline-modeline-vc)
                                  ))
                            (center (list
                                     " "
                                     (powerline-mode-icon)
                                     " "
                                     ;;major-mode
                                     (powerline-major-mode)
                                     " "))
                            (rhs (list
                                  (powerline-ace-window)
                                  " | "
                                  (format "%s" (eyebrowse--get 'current-slot))
                                  " | "
                                  (powerline-raw "%l:%c" face1 'r)
                                  " | "
                                  (powerline-raw "%6p" face1 'r)
                                  (powerline-hud 'highlight 'region 1)
                                  " "
                                  ))
                            )
                       (concat
                        (powerline-render lhs)
                        (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                        (powerline-render center)
                        (powerline-fill face2 (powerline-width rhs))
                        (powerline-render rhs))))))
    )
#+END_SRC
** emojify
#+begin_src emacs-lisp
  (use-package emojify
    :demand t
    :config
    (add-hook 'after-init-hook #'global-emojify-mode)
)
#+end_src
** dumb-jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    ;; integrate with evil-jump (C-i, C-o)
    (advice-add 'dumb-jump-go :before (lambda (&rest r) (evil-set-jump))))
#+end_src
** view-large-files
#+begin_src emacs-lisp
  (use-package vlf)
#+end_src
** language-server
#+begin_src emacs-lisp
    (use-package lsp-mode
      :demand t
      :config

      (defconst lsp-javascript--get-root
      (lsp-make-traverser #'(lambda (dir)
                            (directory-files dir nil "package.json"))))

      (lsp-define-stdio-client
       lsp-javascript-flow "javascript"
       lsp-javascript--get-root '("flow-language-server" "--stdio")
       :ignore-messages '("\[INFO].*?nuclide"))

    ;; Here we'll add the function that was dynamically generated by the
    ;; call to lsp-define-stdio-client to the major-mode hook of the
    ;; language we want to run it under.
    ;;
    ;; This function will turn lsp-mode on and call the command given to
    ;; start the LSP server.
      (add-hook 'rjsx-mode-hook #'lsp-javascript-flow-enable) ;; for rjsx-mode support
      )

      (use-package lsp-ui
        :after (lsp-mode)
        :init
        (add-hook 'lsp-mode-hook 'lsp-ui-mode)
        (add-hook 'lsp-mode-hook 'flycheck-mode))

      (use-package company-lsp
        :after (lsp-mode)
        :init
        (push 'company-lsp company-backends))
#+end_src
* Temp
#+begin_src emacs-lisp
  ;; (use-package nlinum
  ;;   :demand t
  ;;   :init
  ;;   (progn
  ;;     (setq nlinum-format "%3d ")
  ;;     ))
  ;; (use-package nlinum-relative
  ;;   :demand t
  ;;   :init
  ;;   (progn
  ;;     ;;(add-hook 'prog-mode-hook 'nlinum-relative-mode)
  ;;     (global-nlinum-relative-mode t)
  ;;     (setq nlinum-relative-current-symbol "")
  ;;     (nlinum-relative-setup-evil)))
  ;; default values for indentation (possibly overwritten by editorconfig)
  (setq
   js2-basic-offset 2
   js-indent-level 2
   js-expr-indent-offset -2)
#+end_src
#+begin_src emacs-lisp
  ;; Don't litter my init file
  (setq custom-file "~/.emacs.d/local/custom-set.el")
  (load custom-file 'noerror)
#+END_SRC

** Post Initialization
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
